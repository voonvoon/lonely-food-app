// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  hashedPassword String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole?       @default(USER)
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @db.String
  slug          String        @unique @db.String
  createdAt     DateTime      @default(now()) @map("createdAt")
  updatedAt     DateTime      @updatedAt @map("updatedAt")
  subCategories SubCategory[] @relation("CategoryToSubCategory")
  item          Item[]        @relation("CategoryToItem")
}

model SubCategory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String   @db.String
  slug           String   @db.String
  parentCategory String   @db.ObjectId
  createdAt      DateTime @default(now()) @map("createdAt")
  updatedAt      DateTime @updatedAt @map("updatedAt")

  parent Category @relation(fields: [parentCategory], references: [id], name: "CategoryToSubCategory")

  Item Item[] @relation(name: "subCategoryToItem")

  //in Prisma, the parent is just a name for the relation field. You can name it anything that makes sense for your 
  //data model. The important parts are the @relation directive and its parameters, which define how the relation works.

  @@index([slug])
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  data Bytes
}

model Item {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String  @unique
  slug        String
  description String
  price       Float?
  available   Boolean @default(true)

  newSubCategory Json

  category    String?   @db.ObjectId
  categoryRef Category? @relation(fields: [category], references: [id], name: "CategoryToItem")

  //due to i failed to populate the subCategoryRef, i use newSubCAtgory to store the subCategory with id and name.it is a json type. i will come back to this later
  subCategory    String[]     @db.ObjectId
  subCategoryRef SubCategory? @relation(fields: [subCategory], references: [id], name: "subCategoryToItem")

  //images String[] @db.ObjectId
  images Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test_one {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  name String
  test Test_two[]
}

model Test_two {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  testId  String   @db.ObjectId
  testOne Test_one @relation(fields: [testId], references: [id])
}

model Order {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  orderItems  Json // Array to store many items with {id, title, price, qty}
  email       String
  totalAmount Float
  phone       String
  name        String
  tranID      String
  orderid     String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
